name: 'Check build status and run tests'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build

  test-unit:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    env:
      DATABASE_URL: mongodb://localhost:27017/ushort
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install
      - name: Setup MongoDB
        run: docker compose -f docker-compose.dev.yaml up -d
      - run: npm run test
      - name: Clean-up MongoDB
        if: always()
        run: docker compose -f docker-compose.dev.yaml down -v

  test-integration:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    env:
      DATABASE_URL: mongodb://localhost:27017/ushort
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install
      - name: Setup MongoDB
        run: docker compose -f docker-compose.dev.yaml up -d
      - run: npm run test:e2e
      - name: Clean-up MongoDB
        if: always()
        run: docker compose -f docker-compose.dev.yaml down -v

